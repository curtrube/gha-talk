name: AWS Assume Role (OIDC)

env:
  terraform_root_dir: terraform-demo
  terraform_version: 1.7
  aws_account_prefix: app

on: 
  workflow_dispatch:
    inputs:
      action:
        description: Terraform action
        required: true
        type: choice
        default: plan
        options:
          - plan
          - apply
          - destroy
          - unlock
      environment:
        description: Environment
        required: true
        type: choice
        default: dev
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  get-env-vars:
    runs-on: ubuntu-latest
    steps:
    - id: get-env-vars
      run: |
        echo "terraform_root_dir"=${{ env.terraform_root_dir }} >> $GITHUB_OUTPUT
        echo "terraform_version"=${{ env.terraform_version }} >> $GITHUB_OUTPUT
        echo "aws_account_prefix"=${{ env.aws_account_prefix }} >> $GITHUB_OUTPUT
    outputs:
      terraform_root_dir: ${{ steps.get-env-vars.outputs.terraform_root_dir }}
      terraform_version: ${{ steps.get-env-vars.outputs.terraform_version }}
      aws_account_prefix: ${{ steps.get-env-vars.outputs.aws_account_prefix }}

  terra-flow:
    runs-on: ubuntu-latest
    needs: get-env-vars
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS assume role with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::992382678496:role/GitHubActionsAdminRole

      - name: Get AWS account id
        run: |
          aws_account_id=$(aws ssm get-parameter --name "/accounts/${{ needs.get-env-vars.outputs.aws_account_prefix }}/${{ inputs.environment }}" --with-decryption --query "Parameter.Value")
          echo $aws_account_id

      # Once we have the target env account ID we need to assume role into that account

      - name: Get caller identity
        run: |
          aws sts get-caller-identity

      - id: repo-basename
        run: |
          echo "value=`basename ${{ github.repository }}`" >> $GITHUB_OUTPUT
        shell: bash

      - name: print repo name
        run: |
          echo ${{ steps.repo-basename.outputs.value }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.get-env-vars.outputs.terraform_version }}

      # Generate additional variables.tf

      - name: Run terraform
        run: |
          TF_ACTION=${{ inputs.action }}
          TF_ROOT_DIR=${{ needs.get-env-vars.outputs.terraform_root_dir }}
          ENVIRONMENT=${{ inputs.environment }}

          region="us-east-1"
          workspace=${{ steps.repo-basename.outputs.value }}

          # Generate workflow variables
          variables=$(cat <<EOF
          variable "environment" {
            default = "$ENVIRONMENT"
          }
          EOF
          )
          echo "$variables" > "./$TF_ROOT_DIR/vars.tf"

          # Generate remote state backend
          backend_config=$(cat <<EOF
          terraform {
            backend "s3" {
              bucket         = "terraform-state-992382678496"
              key            = "$workspace/$ENVIRONMENT.terraform.tfstate"
              region         = "$region"
              encrypt        = true
              dynamodb_table = "terraform-lock-992382678496"
            }
          }
          EOF
          )
          echo "$backend_config" > "./$TF_ROOT_DIR/backend.tf"

          cd $TF_ROOT_DIR

          terraform init
          terraform validate

          echo "terraform $TF_ACTION -var-file=environments/$ENVIRONMENT.tfvars"
          if [ "$TF_ACTION" = "plan" ]; then
            terraform plan -var-file=environments/$ENVIRONMENT.tfvars
          elif [ "$TF_ACTION" = "apply" ]; then
            terraform apply -var-file=environments/$ENVIRONMENT.tfvars --auto-approve
          elif [ "$TF_ACTION" = "destroy" ]; then
            terraform destroy -var-file=environments/$ENVIRONMENT.tfvars --auto-approve
          else
            echo "Invalid action $TF_ACTION"
          fi